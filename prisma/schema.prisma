// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id String @unique @default(uuid())
  name String
  description String
  image String
  teamScoreId String @unique
  teamScore TeamScore @relation(fields: [teamScoreId], references: [id])
  competitionId String?
  competition Competition? @relation(fields: [competitionId], references: [id])
  defender Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Competition {
  id String @unique @default(uuid())
  name String
  description String
  image String
  round Int
  prompts Prompt[]
  teams Team[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prompt {
  id String @unique @default(uuid())
  isPost Boolean
  name String
  description String
  competitionId String
  order Int
  image String
  model String
  maxHealth Int
  health Int
  competition Competition @relation(fields: [competitionId], references: [id])
  defenses TeamDefense[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamDefense {
  id String @id @default(uuid())
  prompt Prompt @relation(fields: [promptId], references: [id])
  promptId String
  script String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamScore {
  @@unique([teamId, competitionId])
  id String @id @default(uuid())
  teamId String
  competitionId String
  points Point[]
  team Team?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Point {
  id String @id @default(uuid())
  reason String
  awardedBy String?
  teamScore TeamScore @relation(fields: [teamScoreId], references: [id])
  teamScoreId String
  penalty Boolean @default(false)
  amount Int
  createdAt DateTime @default(now())
}
