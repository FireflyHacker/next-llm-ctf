// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  team          Team?           @relation(fields: [teamId], references: [id])
  teamId        String?
  apiKey        String?         @unique
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticators Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AuditLog AuditLog[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Team {
  id            String         @id @default(uuid())
  name          String
  description   String
  image         String
  users         User[]
  teamScoreId   String        @unique
  teamScore     TeamScore     @relation(fields: [teamScoreId], references: [id])
  competitionId String?
  competition   Competition?  @relation(fields: [competitionId], references: [id])
  defender      Boolean
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  Defense Defense[]
}

model Competition {
  id                String               @id @default(uuid())
  name              String
  description       String               @default("")
  image             String
  round             Int                  @default(1)
  modules           CompetitionModule[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  Team Team[]
}

model CompetitionModule {
  id              String         @id @default(uuid())
  name            String
  description     String
  moduleType      String // "Challenge", "Attack/Defense", etc.
  competition     Competition    @relation(fields: [competitionId], references: [id])
  competitionId   String
  prompts         CompetitionPrompt[]
  defensePrompts  DefensePrompt[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model CompetitionPrompt {
  id           String         @id @default(uuid())
  order        Int
  moduleId     String
  module       CompetitionModule @relation(fields: [moduleId], references: [id])
  prompt       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DefensePrompt {
  id           String         @id @default(uuid())
  name         String
  order        Int
  prompt       String
  moduleId     String
  module       CompetitionModule @relation(fields: [moduleId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Defense Defense[]
}

model Defense {
  id               String   @id @default(cuid())
  name             String
  teamId           String?
  team             Team?    @relation(fields: [teamId], references: [id])
  defensePrompts   DefensePrompt[]
  tokensUsed       Int      @default(0)
  attemptsResisted Int      @default(0)
  ownerId          String
}

model Attack {
  id              String   @id @default(cuid())
  defenseId       String
  tokensUsed      Int      @default(0)
  attempts        Int      @default(1)
  ownerId         String
}

model TeamScore {
  id            String @id @default(uuid())
  teamId        String
  competitionId String?
  points        Point[]
  team          Team?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Point {
  id           String @id @default(uuid())
  reason       String
  userId       String
  awardedBy    String?
  teamScore    TeamScore? @relation(fields: [teamScoreId], references: [id])
  teamScoreId  String?
  penalty      Boolean @default(false)
  amount       Int
  createdAt    DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // "API_KEY_GENERATED", "API_KEY_REVOKED", etc.
  details   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
