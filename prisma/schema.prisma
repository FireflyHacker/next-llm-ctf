// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  team          Team?           @relation(fields: [teamId], references: [id])
  teamId        String?
  apiKey        String?         @unique
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticators Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AuditLog AuditLog[]

  ScoringComponent ScoringComponent[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Team {
  id            String         @id @default(uuid())
  name          String
  description   String
  image         String
  users         User[]
  competitionId String?
  competition   Competition?  @relation(fields: [competitionId], references: [id])
  defender      Boolean
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  Defense Defense[]

  ScoringComponent ScoringComponent[]
}

model Competition {
  id                String               @id @default(uuid())
  name              String
  description       String               @default("")
  image             String
  round             Int                  @default(1)
  modules           CompetitionModule[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  Team Team[]

  ScoringComponent ScoringComponent[]
}

model CompetitionModule {
  id              String         @id @default(uuid())
  name            String
  description     String
  moduleType      String // "Challenge", "Attack/Defense", etc.
  competition     Competition    @relation(fields: [competitionId], references: [id])
  competitionId   String
  prompts         CompetitionPrompt[]
  defensePrompts  DefensePrompt[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model CompetitionPrompt {
  id           String         @id @default(uuid())
  order        Int
  moduleId     String
  module       CompetitionModule @relation(fields: [moduleId], references: [id])
  prompt       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DefensePrompt {
  id           String         @id @default(uuid())
  name         String
  order        Int
  prompt       String
  moduleId     String
  module       CompetitionModule @relation(fields: [moduleId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Defense Defense[]
}

model Defense {
  id               String   @id @default(cuid())
  name             String
  teamId           String?
  team             Team?    @relation(fields: [teamId], references: [id])
  defensePrompts   DefensePrompt[]
  tokensUsed       Int      @default(0)
  attemptsResisted Int      @default(0)
  ownerId          String
}

model Attack {
  id              String   @id @default(cuid())
  defenseId       String
  tokensUsed      Int      @default(0)
  attempts        Int      @default(1)
  ownerId         String
}

// Each user will have an array of scoring components, 
// which could be stored as a separate table for flexibility.
model ScoringComponent {
id              String      @id @default(uuid())
pointTotal      Int         @default(0)
points          Point[]
// Related user (Scores are user based, team scores are calculated from the user scores)
user            User        @relation(fields: [userId], references: [id])
userId          String 
// Related team (optional)
team            Team?       @relation(fields: [teamId], references: [id])
teamId          String?
// Related competition (Each scoring component is tied to a specific competition or challenge)
competition     Competition @relation(fields: [competitionId], references: [id])
competitionId   String
}

// This represents individual point events tied to scoring components.
model Point {
  id                  String           @id @default(uuid())
  penalty             Boolean          @default(false)          // Set to true if this should subtract points
  value               Int                                       // The amount awarded/penalized
  resourceName        String           @default("Payton Bucks") // Name of resource ($, points, etc)
  reason              String?                                   // Why the points were awarded, e.g., "Challenge Completion," "Defense Success"
  awardedBy           String?                                   // Defense defeated or Admin or challenge
  // Related scoring component
  scoringComponentId  String
  scoringComponent    ScoringComponent @relation(fields: [scoringComponentId], references: [id])

  createdAt           DateTime         @default(now())
}

model AuditLog {
  id        String    @id @default(cuid())
  action    String    // "API_KEY_GENERATED", "API_KEY_REVOKED", etc.
  details   String?

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
}
